// Online C++ compiler to run C++ program online
/*#include <iostream>
using namespace std;
class hello{
    public:
    int a;
   

    void fun(){
       cout<<" i am animal";
    }
    
};
class hello1 : public hello
{
    public:
    int a;
    void dog(){
        cout<<"barks";
    }
};



int main() {
     hello h1;
     hello1 h2;
     
     h2.fun();
//h2.dog();
     //cout<<h1.val;
   

    return 0;
}*/
// Online C++ compiler to run C++ program online






/*#include <iostream>
using namespace std;
class hello{
    public:
    int a;
   

    void fun(){
       cout<<" i am animal"<<endl;
    }
    
};
class hello1 : public hello
{
    public:
    int a;
    void dog(){
        cout<<"barks"<<endl;
    }
};
class hello2 : public hello{
    public :
    void cat(){
        cout<<"meow"<<endl;
    }
};



int main() {
     hello h1;
     hello1 h2;
     hello2 h3;
     
     h2.fun();
     h3.cat();
     h3.fun();
//h2.dog();
     //cout<<h1.val;
   

    return 0;
}*/


/*#include <iostream>
using namespace std;
class hello{
    public:
    int a;
   

    void fun(){
       cout<<" i am animal"<<endl;
    }
    
};
class hello1 
{
    public:
  
    void dog(){
        cout<<"barks"<<endl;
    }
};
class hello2 : public hello, hello1{
    public :
    void cat(){
        cout<<"meow"<<endl;
    }
};



int main() {
     hello h1;
     hello1 h2;
     hello2 h3;
     
    // h2.fun();
     h3.cat();
     h3.fun();
//h2.dog();
     //cout<<h1.val;
   

    return 0;
}  */


#include <iostream>
using namespace std;
class hello{
    public:
    int a;
   

    void fun(){
       cout<<" i am animal"<<endl;
    }
    
};
class hello1 : public hello
{
    public:
    int a;
    void dog(){
        cout<<"barks"<<endl;
    }
};
class hello2 : public hello1{
    public :
    void cat(){
        cout<<"meow"<<endl;
    }
};



/*int main() {
     hello h1;
     hello1 h2;
     hello2 h3;
     
     h2.fun();
     h2.dog();
     h3.cat();
     h3.fun();
//h2.dog();
     //cout<<h1.val;
   

    return 0;
} */



/*
#include <iostream>
using namespace std;

class bull {
public:
    virtual void bar() {  // Virtual function
        cout << "hello" << endl;
    }
};

class buol : public bull {
public:
    void bar() override {  // Overriding function in derived class
        cout << "hi overridden" << endl;
    }
};

int main() {
    bull* s1 = new buol();  // Pointer to base class, but object of derived class
    s1->bar();              // Calls the overridden method in the derived class

    delete s1;              // Don't forget to delete dynamically allocated memory
    return 0;
}
*/

ABSTRACTION 

class Animal {
public:
    virtual void sound() = 0;  // Pure virtual function
};

class Dog : public Animal {
public:
    void sound() override {
        cout << "Dog barks" << endl;
    }
};

class Cat : public Animal {
public:
    void sound() override {
        cout << "Cat meows" << endl;
    }
};


#include <iostream>
using namespace std;

class Person {
public:
    string name;
    int age;

    // Constructor
    Person(string n, int a) {
        name = n;
        age = a;
    }

    // Copy Constructor
    Person(const Person &p) {
        name = p.name;
        age = p.age;
    }
};

int main() {
    Person person1("John", 30);  // Create a person object
    Person person2 = person1;    // Use copy constructor

    cout << "Person 1: " << person1.name << ", " << person1.age << endl;
    cout << "Person 2: " << person2.name << ", " << person2.age << endl;

    return 0;
}



11. Friend Functions (in C++):
Question: What is a friend function in C++? How can it access private members?
Implementation Task: Create a class Box with a friend function calculateVolume() that can access the private members of the class.
cpp
Copy code
class Box {
private:
    int length, width, height;

public:
    Box(int l, int w, int h) : length(l), width(w), height(h) {}

    // Friend function
    friend int calculateVolume(Box b);
};

int calculateVolume(Box b) {
    return b.length * b.width * b.height;
}



10. Interfaces (in Java):
Question: What is an interface in Java? How is it different from an abstract class?
Implementation Task: Create an interface Flyable with a method fly(). Implement this interface in two classes Bird and Airplane.
java
Copy code
interface Flyable {
    void fly();
}

class Bird implements Flyable {
    public void fly() {
        System.out.println("Bird flies");
    }
}

class Airplane implements Flyable {
    public void fly() {
        System.out.println("Airplane flies");
    }
}
