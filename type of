Sure! Let's implement different types of inheritance in C++. I will provide examples for each type: single, multiple, multilevel, hierarchical, and hybrid inheritance.

1. Single Inheritance
In single inheritance, a derived class inherits from one base class.

Code Example:

cpp
Copy code
#include <iostream>
using namespace std;

// Base class
class Animal {
public:
    void sound() {
        cout << "Animal sound" << endl;
    }
};

// Derived class
class Dog : public Animal {
public:
    void bark() {
        cout << "Dog barks" << endl;
    }
};

int main() {
    Dog dog;
    dog.sound(); // Inherited from Animal
    dog.bark();  // Dog's own method
    return 0;
}
2. Multiple Inheritance
In multiple inheritance, a derived class can inherit from more than one base class.

Code Example:

cpp
Copy code
#include <iostream>
using namespace std;

// Base class 1
class Canine {
public:
    void canineInfo() {
        cout << "Canine family" << endl;
    }
};

// Base class 2
class Mammal {
public:
    void mammalInfo() {
        cout << "Mammal family" << endl;
    }
};

// Derived class
class Dog : public Canine, public Mammal {
public:
    void bark() {
        cout << "Dog barks" << endl;
    }
};

int main() {
    Dog dog;
    dog.canineInfo(); // From Canine
    dog.mammalInfo(); // From Mammal
    dog.bark();       // Dog's own method
    return 0;
}
3. Multilevel Inheritance
In multilevel inheritance, a class is derived from another derived class.

Code Example:

cpp
Copy code
#include <iostream>
using namespace std;

// Base class
class Animal {
public:
    void sound() {
        cout << "Animal sound" << endl;
    }
};

// Derived class
class Dog : public Animal {
public:
    void bark() {
        cout << "Dog barks" << endl;
    }
};

// Further derived class
class Puppy : public Dog {
public:
    void whine() {
        cout << "Puppy whines" << endl;
    }
};

int main() {
    Puppy puppy;
    puppy.sound(); // Inherited from Animal
    puppy.bark();  // Inherited from Dog
    puppy.whine(); // Puppyâ€™s own method
    return 0;
}
4. Hierarchical Inheritance
In hierarchical inheritance, multiple classes inherit from a single base class.

Code Example:

cpp
Copy code
#include <iostream>
using namespace std;

// Base class
class Animal {
public:
    void sound() {
        cout << "Animal sound" << endl;
    }
};

// Derived class 1
class Dog : public Animal {
public:
    void bark() {
        cout << "Dog barks" << endl;
    }
};

// Derived class 2
class Cat : public Animal {
public:
    void meow() {
        cout << "Cat meows" << endl;
    }
};

int main() {
    Dog dog;
    Cat cat;
    dog.sound(); // Inherited from Animal
    dog.bark();  // Dog's own method

    cat.sound(); // Inherited from Animal
    cat.meow();  // Cat's own method
    return 0;
}
5. Hybrid Inheritance
Hybrid inheritance is a combination of two or more types of inheritance.

Code Example:

cpp
Copy code
#include <iostream>
using namespace std;

// Base class 1
class Animal {
public:
    void sound() {
        cout << "Animal sound" << endl;
    }
};

// Base class 2
class Pet {
public:
    void type() {
        cout << "I am a pet" << endl;
    }
};

// Derived class
class Dog : public Animal, public Pet {
public:
    void bark() {
        cout << "Dog barks" << endl;
    }
};

int main() {
    Dog dog;
    dog.sound(); // From Animal
    dog.type();  // From Pet
    dog.bark();  // Dog's own method
    return 0;
}
Summary
Single Inheritance: A derived class inherits from one base class.
Multiple Inheritance: A derived class inherits from multiple base classes.
Multilevel Inheritance: A derived class inherits from another derived class.
Hierarchical Inheritance: Multiple derived classes inherit from a single base class.
Hybrid Inheritance: A combination of multiple inheritance types.
